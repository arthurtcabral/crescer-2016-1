--- PARTIAL
1

Parecido com _Layout, mas _Layout é universal.
Partial é usado em casos como: Códigos que só se deseja mostrar em telas de cadastro... ou só em telas de pesquisa... etc.

@Html.Partial("NomeDaPartialQueETipoUm_Layout", new EnderecoDaModel()) {Alguma ação opcional}



--- @Html.Action
2

@Html.Action("Action", "Controller")

Similar ao Partial, porém esse comando passa primeiro por uma action, onde pode conter outros comandos.

O partial devolve diretamente um _Layout (código html).



--- ModelState.isValid
3

if(ModelState.isValid)

Abre os dados da model que vieram por parâmetro e checa se todos os campos preenchidos foram preenchidos da maneira correta. Caso haja algum erro, retorna false.



--- MOSTRAR ERROS PARA CAMPOS ESPECÍFICOS, EM CONTROLLER
4

Na action, por, por exemplo:

if(model.Estado == "RS" && model.Cidade = "SL"){
ModelState.AddModelError("passar a propriedade, caso o erro seja em apenas uma específica. Nesse caso, são duas", "Mensagem de erro.");
}



--- VIEWSTART
5

MVC executa o arquivo _ViewStart.cshtml antes de executar qualquer outra view. Isso é uma convenção.

O layout que está na view, caso haja, sobrescreve o que está na ViewStart.



--- LOCAL DO JQUERY
6

Ao utilizar em _Layout, o correto é que o jQuery fique no topo da página, visto que os validates do jQuery (que estão nas views) dependem dele.

Além disso, as views devem ter, no início:

@section nomeDaSection{

jQuery validações

}

E o layout deve ter, abaixo do } do @RenderBody?
@RenderSection("nomeDaSection", false) (false seta se é obrigatório ou não).



--- SUMMARY
7

/// (Digitar isso em cima dos construtores, nas classes).

/// <summary> Frase explicativa




EXERCÍCIO (DICAS):

ANTES DE ENVIAR PRA TELA DETALHES, SALVAR NUM ARQUIVO DE TEXTO.

PÁGINA DE LISTAGEM

PÁGINA DE EDIÇÃO: HIDDEN FIELD, ID NA MODEL (DEIXAR POR ÚLTIMO. ELA NÃO É URGENTE, MAS IMPORTANTE).


EM DOMINIO, FICAM AS REGRAS DE NEGÓCIO (SE FOR MENOS DE 7 DIAS NAO OCORRE A ENTREGA... ENTRE 7 E 14, COM URGÊNCIA... ETC).

IncluirPedido() NÃO RECEBE UM PedidoModel

Dica: 

try{

var pedido = new Pedido(construtorSimplesQueNaoTemId);
repositorio.InserirPedido(pedido);

}
catch(ArgumentException ex)
{
	ModelState.AddModelError("Mensagem de erro", ex.Message);
	return View("Cadastro", model);
}